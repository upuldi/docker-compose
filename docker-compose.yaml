version: "3.3"

networks:
  frontend:
    ipam:
      config:
        - subnet: 10.27.28.0/24

services:
  #
  # autoheal - restarts unhealthy containers
  #
  autoheal:
    container_name: autoheal
    restart: always
    environment:
      - AUTOHEAL_CONTAINER_LABEL=all
      - TZ=$TZ
    volumes:
      - '/var/run/docker.sock:/var/run/docker.sock'
    image: willfarrell/autoheal
    networks:
      dockervlan:
        ipv4_address: 10.27.29.32        

  #
  # Portainer - docker manager
  #
  portainer:
    image: portainer/portainer-ce
    container_name: portainer
    restart: always
    command: -H unix:///var/run/docker.sock
    networks:
      dockervlan:
        ipv4_address: 10.27.28.124
    ports:
      - 9000:9000
      - 8000:8000
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - $DOCKER_PATH/portainer:/data
    environment:
      - TZ=$TZ

  #
  # Watchtower - updates containers with latest images
  #
  watchtower:
    container_name: watchtower
    image: containrrr/watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock 
    environment:
      TZ: $TZ
      WATCHTOWER_REMOVE_VOLUMES: "true"
      WATCHTOWER_CLEANUP: "true"
      WATCHTOWER_INCLUDE_STOPPED: "true"
      WATCHTOWER_POLL_INTERVAL: $WT_INTERVAL
      WATCHTOWER_TIMEOUT: 15
      WATCHTOWER_NOTIFICATIONS_LEVEL: info
      WATCHTOWER_NOTIFICATIONS: shoutrrr
      # Using Pushbullet, telegram and pushover as examples, but just pick one
      # WATCHTOWER_NOTIFICATION_URL: "pushover://shoutrrr:$PUSHOVER_APP_API__SECRET@$PUSHOVER_USER_API__SECRET/?devices=$PUSHOVER_DEVICE telegram://$TELEGRAM_BOT_TOKEN__SECRET@telegram?channels=$TELEGRAM_CHAT_ID__SECRET pushbullet://$PUSHBULLET_API__SECRET"
    restart: always

  #
  # Dozzle - Container log aggregator
  #
  dozzle:
    container_name: dozzle
    image: amir20/dozzle
    profiles: ['debug']     
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      dockervlan:
        ipv4_address: 10.27.28.121
    ports:
      - 9999:8080
    restart: unless-stopped
    # healthcheck:
    #   test: curl -fSs http://127.0.0.1:9999 > /dev/null || exit 1
    #   start_period: 20s
    #   timeout: 5s
    #   interval: 5s
    #   retries: 3    

  #
  # Prowlarr - index aggregator
  #
  prowlarr:
    container_name: prowlarr
    image: linuxserver/prowlarr:nightly
    profiles: ['download']    
    networks:
      dockervlan:
        ipv4_address: 10.27.28.143
    ports:
      - 9696:9696
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
      - UMASK=002
    volumes:
      - $DOCKER_PATH/prowlarr:/config
    labels: 
      - autoheal="true"
    healthcheck:
      test: curl -fSs http://127.0.0.1:9696 > /dev/null || exit 1
      start_period: 20s
      timeout: 5s
      interval: 5s
      retries: 3    
    restart: unless-stopped
    depends_on:
      qbittorrent:
        condition: service_healthy

  #
  # radarr - Movies Search
  #
  radarr:
    environment:
      - UMASK_SET=22
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
    volumes:
      - $DOCKER_PATH/radarr:/config:rw
      - $MEDIA_PATH:/media:rw
      - $DOWNLOADS:/downloads:rw
    container_name: radarr
    profiles: ['download']    
    labels: 
      - autoheal="true"
    healthcheck:
      test: curl -fSs http://127.0.0.1:7878 > /dev/null || exit 1
      start_period: 20s
      timeout: 5s
      interval: 5s
      retries: 3
    ports:
      - 7878:7878
    networks:
      dockervlan:
        ipv4_address: 10.27.28.132   
    restart: unless-stopped
    entrypoint:
      - /init
    image: linuxserver/radarr:latest
    depends_on:
      qbittorrent:
        condition: service_healthy

  #
  # Sonarr - Show Search 131
  #
  sonarr:
    environment:
      - UMASK_SET=22
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
    volumes:
      - $DOCKER_PATH/sonarr:/config:rw
      - $MEDIA_PATH:/media:rw
      - $DOWNLOADS:/downloads:rw
    container_name: sonarr
    labels: 
      - autoheal="true"
    healthcheck:
      test: curl -fSs http://127.0.0.1:8989 || exit 1
      start_period: 90s
      timeout: 5s
      interval: 5s
      retries: 3
    networks:
      dockervlan:
        ipv4_address: 10.27.28.131          
    ports:
      - 8989:8989
    restart: 'unless-stopped'
    entrypoint:
      - /init
    image: lscr.io/linuxserver/sonarr:latest
    profiles: ['download']    
    depends_on:
      qbittorrent:
        condition: service_healthy

  lidarr:
    image: linuxserver/lidarr:nightly
    container_name: lidarr
    profiles: ['download']    
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
      - UMASK_SET=022 
    volumes:
      - $DOCKER_PATH/lidarr:/config
      - $MEDIA_PATH:/media
      - $DOWNLOADS:/downloads:rw
    networks:
      dockervlan:
        ipv4_address: 10.27.28.144     
    ports:
      - 8686:8686
    restart: unless-stopped
    labels: 
      - autoheal="true"
    healthcheck:
      test: curl -fSs http://127.0.0.1:8686 > /dev/null || exit 1
      start_period: 20s
      timeout: 5s
      interval: 5s
      retries: 3
    depends_on:
      qbittorrent:
        condition: service_healthy

  #
  # Bazarr - subtitles search
  #
  # bazarr:
  #   image: linuxserver/bazarr:development
  #   container_name: bazarr
  #   environment:
  #     - PUID=$PUID
  #     - PGID=$PGID
  #     - TZ=$TZ
  #     - UMASK_SET=022 #optional
  #   volumes:
  #     - $DOCKER_PATH/bazarr:/config
  #     - $MEDIA_PATH:/media
  #   ports:
  #     - 6767:6767
  #   labels: 
  #     - autoheal="true"
  #   healthcheck:
  #     test: curl -fSs http://127.0.0.1:6767 > /dev/null || exit 1
  #     start_period: 60s
  #     timeout: 5s
  #     interval: 5s
  #     retries: 3
  #   restart: unless-stopped
  #   mem_limit: 300M
  #   mem_reservation: 250M
  
  #
  # E-Book Searcher
  #
  readarr:
    container_name: readarr
    image: lscr.io/linuxserver/readarr:develop
    profiles: ['download']    
    networks:
      dockervlan:
        ipv4_address: 10.27.28.142    
    ports:
      - 8787:8787
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
    volumes:
      - $DOCKER_PATH/readarr:/config
      - $MEDIA_PATH:/media:rw
      - $DOWNLOADS:/downloads:rw
    restart: unless-stopped
    labels: 
      - autoheal="true"
    healthcheck:
      test: curl -fSs http://127.0.0.1:8787 > /dev/null || exit 1
      start_period: 20s
      interval: 5s
      timeout: 5s
      retries: 3
    depends_on:
      qbittorrent:
        condition: service_healthy

  #
  # Qbittorrent - default creds are admin & adminadmin
  #
  qbittorrent:
    image: lscr.io/linuxserver/qbittorrent:latest
    container_name: qbittorrent2
    profiles: ['download']    
    environment:
      - PUID=$PUID
      - PGID=$PUID
      - TZ=$TZ
      - WEBUI_PORT=8080
    volumes:
      - $DOCKER_PATH/qbittorrent/config:/config
      - $DOWNLOADS:/downloads
    networks:
      dockervlan:
        ipv4_address: 10.27.28.135
    ports:
      - 8080:8080
      - 6881:6881
      - 6881:6881/udp
    restart: unless-stopped
    labels: 
      - autoheal="true"
    healthcheck:
      test: curl -fSs https://google.com || exit 1
      start_period: 90s
      timeout: 10s
      interval: 5s
      retries: 3

  # Poster
  posterr:
    image: petersem/posterr
    container_name: posterr
    profiles: ['download']    
    environment:
      TZ: $TZ
    volumes:
      - $DOCKER_PATH/posterr/randomthemes:/usr/src/app/public/randomthemes
      - $DOCKER_PATH/posterr/config:/usr/src/app/config
    networks:
      dockervlan:
        ipv4_address: 10.27.28.145
    ports:
      - 9876:3000
    restart: always

  # gaps - finds missing movies in plex libraries
  gaps:
    profiles: ['download']    
    networks:
      dockervlan:
        ipv4_address: 10.27.28.146  
    ports:
      - 8484:8484
    container_name: gaps
    expose:
      - '32400'
    volumes:
      - $DOCKER_PATH/gaps:/usr/data
    image: housewrecker/gaps
    restart: unless-stopped  


#Normal Servers

  #DDNS Updater
  ddns-updater:
    image: qmcgaw/ddns-updater
    container_name: ddns-updater
    networks:
      dockervlan:
        ipv4_address: 10.27.28.85
    ports:
      - 8000:8000/tcp
    volumes:
      - $DOCKER_PATH/ddns-updater:/updater/data
    environment:
      - CONFIG=
      - PERIOD=5m
      - UPDATE_COOLDOWN_PERIOD=5m
      - PUBLICIP_FETCHERS=all
      - PUBLICIP_HTTP_PROVIDERS=all
      - PUBLICIPV4_HTTP_PROVIDERS=all
      - PUBLICIPV6_HTTP_PROVIDERS=all
      - PUBLICIP_DNS_PROVIDERS=all
      - PUBLICIP_DNS_TIMEOUT=3s
      - HTTP_TIMEOUT=10s
      - TZ=$TZ

      # Web UI
      - LISTENING_PORT=8000
      - ROOT_URL=/

      # Backup
      - BACKUP_PERIOD=0 # 0 to disable
      - BACKUP_DIRECTORY=/updater/data

      # Other
      - LOG_LEVEL=info
      - LOG_CALLER=hidden
      - SHOUTRRR_ADDRESSES=
      - HEALTH_SERVER_ADDRESS=127.0.0.1:9999
    restart: always

  #General Plex
  plex:
    container_name: plex
    restart: unless-stopped
    image: linuxserver/plex
    volumes:
      - $DOCKER_PATH/plex/config:/config
      - $DOCKER_PATH/plex/transcode:/transcode
      - $MEDIA_PATH:/movies
      - $MEDIA_PATH_TV:/tv
      - $MEDIA_PATH_MUSIC:/music     
      - $DOWNLOADS:/downloads
    networks:
      dockervlan:
        ipv4_address: 10.27.28.114
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
      - HOSTNAME=$HOST_NAME
      - PLEX_CLAIM=$PLEX_CLAIM_TOKEN
      - ADVERTISE_IP=$ADVERTISE_IP
      - VERSION=docker
      - ALLOWED_NETWORKS=$ALLOWED_NETWORKS
    labels: 
      autoheal: 'true'
    healthcheck:
      test: curl -fsS http://localhost:32400/identity > /dev/null || exit 1
      start_period: 20s
      timeout: 10s
      interval: 5s
      retries: 3
    # Un-comment the below if you have an embedded intel GPU
    # devices:
    #   - /dev/dri:/dev/dri

  # Plex Audio Books
  plex_audio:
    container_name: plex_audio
    restart: unless-stopped
    image: linuxserver/plex
    volumes:
      - $DOCKER_PATH/plex_audio/config:/config
      - $DOCKER_PATH/plex_audio/transcode:/transcode
      - $MEDIA_PATH_AUDIO:/audio_books
    networks:
      dockervlan:
        ipv4_address: 10.27.29.12
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
      - HOSTNAME=$HOST_NAME
      - PLEX_CLAIM=$PLEX_CLAIM_TOKEN_AUDIO
      - ADVERTISE_IP=$ADVERTISE_IP_AUDIO
      - VERSION=docker
      - ALLOWED_NETWORKS=$ALLOWED_NETWORKS
    labels: 
      autoheal: 'true'
    healthcheck:
      test: curl -fsS http://localhost:32400/identity > /dev/null || exit 1
      start_period: 20s
      timeout: 10s
      interval: 5s
      retries: 3
    # Un-comment the below if you have an embedded intel GPU
    # devices:
    #   - /dev/dri:/dev/dri

# Databases and Key Services

 # Postgres
  postgres:
    image: postgres:10
    container_name: postgres
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
      - POSTGRES_USER=postgres
      - POSTGRES_DB=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - $DOCKER_PATH/postgres:/var/lib/postgresql/data
      - $DOCKER_PATH/postgres-backup:/backup
      - $DOCKER_BACKUP_PATH/postgres:/postgresbackup
    networks:
      dockervlan:
        ipv4_address: 10.27.28.67
    ports:
      - 5432:5432
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5


 # MySQL
  mysql:
    image: mysql
    container_name: mysql
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
      - MYSQL_USER=mysql
      - MYSQL_DATABASE=owncloud
      - MYSQL_ROOT_PASSWORD=1qaz2wsx@
      - MYSQL_PASSWORD=1qaz2wsx@
    volumes:
      - $DOCKER_PATH/mysql:/var/lib/mysql
    networks:
      dockervlan:
        ipv4_address: 10.27.28.101
    ports:
      - 3306:3306
    restart: always
    healthcheck:
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost"]
      timeout: 20s
      retries: 10



#====================
# Other Servers

 #  wikijs
  wikijs:
    image: requarks/wiki
    container_name: wikijs
    networks:
      dockervlan:
        ipv4_address: 10.27.29.126
    ports:
      - 3000:3000
    volumes:
      - $DOCKER_PATH/wikijs/logs:/logs
    environment:
      - DB_TYPE=postgres
      - DB_HOST=10.27.28.67
      - DB_PORT=5432
      - DB_USER=wikijs
      - DB_PASS=wikijs
      - DB_NAME=wikijs
      - DB_SSL=false
      - SSL_ACTIVE=0
      - LETSENCRYPT_DOMAIN=wiki.dolu.win
      - TZ=$TZ
    restart: always
    depends_on:
      postgres:
        condition: service_healthy


  #chrome
  chrome:
    image: ich777/chrome
    container_name: chrome
    profiles: ['web']    
    networks:
      dockervlan:
        ipv4_address: 10.27.28.134
    ports:
      - 8080:8080
    volumes:
      - $DOCKER_PATH/chrome:/chrome
    environment:
      - CUSTOM_RES_W=1280
      - CUSTOM_RES_H=768
      - UMASK=000
      - TZ=$TZ
    restart: unless-stopped
    # depends_on:
    #   postgres:
    #     condition: service_healthy

  # # FireFox
  # firefox:
  #   image: lscr.io/linuxserver/firefox:latest
  #   container_name: firefox
  #   environment:
  #     - PUID=$PUID
  #     - PGID=$PGID
  #     - TZ=$TZ
  #   volumes:
  #     - $DOCKER_PATH/chrome:/config
  #   networks:
  #     dockervlan:
  #       ipv4_address: 10.27.28.134
  #   ports:
  #     - 3000:3000
  #   shm_size: "1gb"
  #   restart: unless-stopped

  # NGinx Local
  nginxl:
    image: jc21/nginx-proxy-manager
    container_name: nginxl
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
      - DB_SQLITE_FILE=/data/database.sqlite
    volumes:
      - $DOCKER_PATH/nginxl/data:/data
      - $DOCKER_PATH/nginxl/letsencrypt:/etc/letsencrypt
      - $DOCKER_PATH/nginxl/var/log:/var/log

    networks:
      dockervlan:
        ipv4_address: 10.27.29.1
    ports:
      - 80:80
      - 81:81
      - 443:443
    shm_size: "1gb"
    restart: unless-stopped

  # Nginx
  nginx:
    image: jlesage/nginx-proxy-manager
    container_name: nginx   
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - UMASK=000
      - TZ=$TZ
    volumes:
      - $DOCKER_PATH/nginx:/config
      - $DOCKER_PATH/nginx/log:/config/log

    networks:
      dockervlan:
        ipv4_address: 10.27.28.112
    ports:
      - 7818:8181
      - 8080:8080
      - 4443:4443
    shm_size: "1gb"
    restart: unless-stopped

  # Planka
  planka:
    image: meltyshev/planka:latest
    container_name: planka
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - BASE_URL=https://project.dolu.win
      - TZ=$TZ
      - DATABASE_URL=postgresql://planka:planka@10.27.28.67:5432/planka
      - SECRET_KEY=0f99e41b11af9efd2cb1b5f4c80bb4db0ad9e1f8014c0fe2c2459d528833781b3ebdf1d7a2e20c9e2d22487a10df7b4bd6f81c9230c0303194fbfd241751b378
   
    volumes:
      - $DOCKER_PATH/planka:/app/public/user-avatars
      - $DOCKER_PATH/planka/projekt-background-images:/app/public/project-background-images
      - $DOCKER_PATH/planka/attachments:/app/public/attachments

    networks:
      dockervlan:
        ipv4_address: 10.27.28.69
    ports:
      - 4000:1337
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy

  # PgAdmin4
  pgadmin:
    image: fenglc/pgadmin4
    container_name: pgadmin
    profiles: ['debug']    
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ

    volumes:
      - $DOCKER_PATH/pgadmin/config:/var/lib/pgadmin

    networks:
      dockervlan:
        ipv4_address: 10.27.28.68
    ports:
      - 5050:5050
    restart: unless-stopped

  # Redis
  redis:
    image: redis
    container_name: redis
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ

    networks:
      dockervlan:
        ipv4_address: 10.27.28.91
    ports:
      - 6379:6379
    restart: unless-stopped

  # tika
  tika:
    image: apache/tika
    container_name: tika
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
      
    networks:
      dockervlan:
        ipv4_address: 10.27.28.129
    ports:
      - 9998:9998
    restart: unless-stopped

  # gotenberg
  gotenberg:
    image: gotenberg/gotenberg
    container_name: gotenberg
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
      
    networks:
      dockervlan:
        ipv4_address: 10.27.28.128
    ports:
      - 3000:3000
    restart: unless-stopped

  # paperless
  paperless:
    image: ghcr.io/paperless-ngx/paperless-ngx
    container_name: paperless
    environment:
      - USERMAP_UID=$PUID
      - USERMAP_GID=$PGID
      - TZ=$TZ
      - PAPERLESS_REDIS=redis://10.27.28.91:6379
      - PAPERLESS_OCR_LANGUAGE=eng
      - PAPERLESS_FILENAME_FORMAT={created}-{correspondent}-{title}
      - PAPERLESS_DBHOST=10.27.28.67
      - PAPERLESS_DBNAME=paperless
      - PAPERLESS_DBUSER=paperless
      - PAPERLESS_DBPASS=paperless
      - PAPERLESS_DBSSLMODE=prefer
      - PAPERLESS_TIKA_ENABLED=1
      - PAPERLESS_TIKA_GOTENBERG_ENDPOINT=http://10.27.28.128:3000
      - PAPERLESS_TIKA_ENDPOINT=http://10.27.28.129:9998
      - PAPERLESS_URL=https://paper.dolu.win
      - PAPERLESS_ALLOWED_HOSTS=paper.dolu.win,10.27.28.84
      - PAPERLESS_OCR_MAX_IMAGE_PIXELS=8000000000
      - PAPERLESS_WORKER_TIMEOUT=100000
      - PAPERLESS_IGNORE_DATES=
      - PAPERLESS_CONSUMER_POLLING=0
      - PAPERLESS_SECRET_KEY=:>{Yk,cU"b/9fkdBBLM6R/379*=$s<W=jjk/*$L<55VSrZ265n2)Lb>&>{N#:L\NJ!A/.sL%bf?D\+G`Ht'\y=qB}5}Me>x<pL^g?sPNw4;8J=>Jqu*!6qAPkv{U:#2j
      
    networks:
      dockervlan:
        ipv4_address: 10.27.28.84
    volumes:
      - $DOCUMENT_PATH/paperless-documents:/usr/src/paperless/data
      - $DOCUMENT_PATH/paperless-documents/paperless-data-dir/media:/usr/src/paperless/media
      - $DOCUMENT_PATH/paperless-documents/paperless-consume-dir:/usr/src/paperless/consume
      - $DOCUMENT_PATH/paperless-documents/paperless-export-dir:/usr/src/paperless/export

    ports:
      - 8000:8000
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy


  # huginn
  huginn:
    image: huginn/huginn
    container_name: huginn
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ    
      - HUGINN_TWITTER_OAUTH_KEY=64eQeuAGOgRkx9Z70DVTMuRC6
      - HUGINN_TWITTER_OAUTH_SECRET=BXDFuLeYiWCaBfDW3HxKAStjox1pNBVEkQUa37Effn2AtEo9ir
      - DATABASE_ADAPTER=postgresql
      - DATABASE_HOST=10.27.28.67
      - DATABASE_PORT=5432
      - HUGINN_DATABASE_USERNAME=huginn
      - HUGINN_DATABASE_PASSWORD=huginn
      - HUGINN_DATABASE_NAME=huginn
      - DO_NOT_CREATE_DATABASE=1
      - SMTP_DOMAIN=gmail.com
      - SMTP_USER_NAME=upuldi.iot@gmail.com
      - SMTP_PASSWORD="1qaz2wsx@WSX"
      - SMTP_SERVER=smtp.gmail.com
      - SMTP_PORT=587
      - SMTP_AUTHENTICATION=plain
      - SMTP_ENABLE_STARTTLS_AUTO=true
      - SEND_EMAIL_IN_DEVELOPMENT=true
      - EMAIL_FROM_ADDRESS=upuldi.iot@gmail.com
#      - ADDITIONAL_GEMS="huginn_http_request_agent,huginn_jsonapi_agent(git: https://github.com/yubuylov/huginn_jsonapi_agent.git)"

    networks:
      dockervlan:
        ipv4_address: 10.27.28.99
    volumes:
      - $DOCKER_PATH/huginn:/var/lib/mysql

    ports:
      - 3000:3000
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy

        
  # rss-bridge
  rss-bridge:
    image: rssbridge/rss-bridge
    container_name: rssbridge
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ

    volumes:
      - $DOCKER_PATH/rss-bridge/whitelist/whitelist.txt:/app/whitelist.txt
    
    networks:
      dockervlan:
        ipv4_address: 10.27.28.100
    ports:
      - 80:80
    restart: unless-stopped

  # jackett
  jackett:
    image: lscr.io/linuxserver/jackett:latest
    profiles: ['download']    

    container_name: jackett
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
      - AUTO_UPDATE=true
      - RUN_OPTS=run options here
      - UMASK=022


    volumes:
      - $MEDIA_PATH/jacket:/downloads
      - $DOCKER_PATH/jackett:/config
    
    networks:
      dockervlan:
        ipv4_address: 10.27.28.133
    ports:
      - 9117:9117
    restart: unless-stopped

  # monica
  monica:
    image: monica
    profiles: ['optional']    
    container_name: monica
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
      - APP_ENV=production
      - APP_DEBUG=debug
      - APP_KEY=hn1UjP9w4282TjcQjZoOp3DHJWntLAJr
      - HASH_SALT=IxFkXQXmx5VH4xTHbz1O
      - HASH_LENGTH=18
      - APP_URL=http://10.27.29.22
      - DB_CONNECTION=mysql
      - DB_HOST=10.27.28.101
      - DB_PORT=3306
      - DB_DATABASE=monica
      - DB_USERNAME=monica
      - DB_PASSWORD=monica
      - DB_USE_UTF8MB4=true
      - MAIL_DRIVER=smtp
      - MAIL_HOST=smtp.gmail.com
      - MAIL_PORT=465
      - MAIL_ENCRYPTION=TLS
      - MAIL_USERNAME=upuldi.iot@gmail.com
      - MAIL_PASSWORD=1qaz2wsx@WSX
      - MAIL_FROM_ADDRESS=upuldi.iot@gmail.com
      - MAIL_FROM_NAME=Monica instance
      # - APP_EMAIL_NEW_USERS_NOTIFICATION=
      - APP_DEFAULT_LOCALE=en
      - APP_DISABLE_SIGNUP=false
      - APP_SIGNUP_DOUBLE_OPTIN=false
      - APP_TRUSTED_PROXIES=*

    volumes:
      - $DOCKER_PATH/monica:/var/www/html/storage
    
    networks:
      dockervlan:
        ipv4_address: 10.27.29.22
    ports:
      - 80:80
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy


  # babybuddy
  babybuddy:
    image: lscr.io/linuxserver/babybuddy
    profiles: ['optional']    

    container_name: babybuddy
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
      - CSRF_TRUSTED_ORIGINS=http://127.0.0.1:8000,https://baby.dolu.win
      - CSRF_TRUSTED_ORIGINS=http://10.27.28.79:3000/,https://baby.dolu.win
      - UMASK=022

    volumes:
      - $DOCKER_PATH/babybuddy:/config
    
    networks:
      dockervlan:
        ipv4_address: 10.27.28.115
    ports:
      - 8000:8000
    restart: unless-stopped

  # code-server
  code-server:
    image: lscr.io/linuxserver/code-server
    container_name: code-server
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
      - PASSWORD=Di24865@Tower@Code
      # - HASHED_PASSWORD=Di24865@Tower$Code
      # - SUDO_PASSWORD=Di24865@Tower$Code
      # - SUDO_PASSWORD_HASH=
      - PROXY_DOMAIN=code.dolu.win
      - DEFAULT_WORKSPACE=/config/workspace
      - UMASK=022

    volumes:
      - $DOCKER_PATH/code-server:/config
    
    networks:
      dockervlan:
        ipv4_address: 10.27.28.89
    ports:
      - 8443:8443
    restart: unless-stopped

  #PhotoPrism
  photoprism:
    image: photoprism/photoprism
    profiles: ['optional']    
    container_name: photoprism
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
      - PHOTOPRISM_UPLOAD_NSFW=true
      - PHOTOPRISM_DETECT_NSFW=true
      - PHOTOPRISM_SITE_TITLE=Dolu Photos
      - PHOTOPRISM_SITE_CAPTION=Doluweera Photos 
      - PHOTOPRISM_ADMIN_PASSWORD=Di24865@Tower@Photo
      - PHOTOPRISM_DATABASE_DRIVER=mysql
      - PHOTOPRISM_AUTO_INDEX=180
      - PHOTOPRISM_AUTO_IMPORT=180
      - PHOTOPRISM_AUTH=true
      - PHOTOPRISM_DATABASE_SERVER=10.27.28.101:3306
      - PHOTOPRISM_DATABASE_NAME=photoprism
      - PHOTOPRISM_DATABASE_USER=photoprism
      - PHOTOPRISM_DATABASE_PASSWORD=photoprism
      - PHOTOPRISM_SETTINGS_HIDDEN=false
      - PHOTOPRISM_THUMB_UNCACHED=false
      - PHOTOPRISM_THUMB_SIZE=2048
      - PHOTOPRISM_THUMB_SIZE_UNCACHED=7680
      - PHOTOPRISM_JPEG_SIZE=7680
      - PHOTOPRISM_JPEG_QUALITY=90
      - PHOTOPRISM_DARKTABLE_PRESETS=false
      - PHOTOPRISM_THUMB_FILTER=lanczos
      - PHOTOPRISM_EXPERIMENTAL=false
      - PHOTOPRISM_STORAGE_PATH=/photoprism/storage
      - UMASK=022

    volumes:
      - $DOCKER_PATH/photoprism:/photoprism/storage
      - $PHOTO_PATH:/photoprism/originals

    networks:
      dockervlan:
        ipv4_address: 10.27.28.113
    ports:
      - 2342:2342
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy


  # adminer
  adminer:
    image: adminer
    profiles: ['debug']    
    container_name: adminer
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
      - UMASK=022

    networks:
      dockervlan:
        ipv4_address: 10.27.28.103
    ports:
      - 8080:8080
    restart: unless-stopped

  # linkace
  linkace:
    image: linkace/linkace:simple
    container_name: linkace
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
      - UMASK=022
      - DB_CONNECTION=pgsql
 
    volumes:
      - $DOCKER_PATH/linkace/logs/:/app/storage/logs
      - $DOCKER_PATH/linkace/.env:/app/.env

    networks:
      dockervlan:
        ipv4_address: 10.27.28.104
    ports:
      - 4256:80
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy

networks:
  dockervlan:
    name: dockervlan
    driver: macvlan
    driver_opts:
      parent: eth1
    ipam:
      config:
        - subnet: "10.27.28.0/22"
          ip_range: "10.27.28.0/24"
          gateway: "10.27.28.1"

      